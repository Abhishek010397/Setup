---

# Install prerequisites
  - name: make sure docker-python RPM is not installed for RedHat
    yum:
      name: docker-python
      state: absent
    become: yes
    when: ansible_os_family == "RedHat"

  - name: Install easy_install, python-dev package for Debian
    apt:
      pkg: "{{ item }}"
      state: latest
      update_cache: yes
      cache_valid_time: 3600
    become: yes
    with_items:
      - python-dev
      - python-setuptools #easy_install
    when: ansible_os_family == "Debian"

  - include: pip.yml

  - name: Install httplib2 dependency for uri module #The dependency on httplib2 was removed in Ansible 2.1
    pip: name=httplib2 state=present
    become: yes

# Install and run docker registry
  - stat: path={{docker.registry.home}}
    register: docker_registry_storage

  - name: Prepare Docker Registry Storage
    file:
      path: "{{docker.registry.home}}"
      state: directory
      mode: 750
    become: yes
    when: not docker_registry_storage.stat.exists #may already exist as a symbolic link

  - name: stop previous docker registry
    command: "docker kill registry"
    ignore_errors: yes
    become: yes

  - name: remove previous docker registry
    command: "docker rm registry"
    ignore_errors: yes
    become: yes

  - name: ensure Docker Registry is running
    command: "docker run -d -p 127.0.0.1:5000:5000 --name registry --net=bridge --privileged=true --restart=always --memory=\"1024m\" -e \"REGISTRY_STORAGE_FILESYSTEM_ROOTDIRECTORY=/registry\" -v {{docker.registry.home}}:/registry:rw registry:2"
    register: start_registry
    become: yes

  - name: test Docker Registry
    uri:
      url: http://localhost:5000/v2/
      status_code: 200
      return_content: yes
    register: test_docker_registry
    until: test_docker_registry.content == '{}'
    retries: 5
    delay: 2
    ignore_errors: yes

# Secure docker registry
  - name: Secure Docker Registry with Nginx for Debian
    apt:
      name: "{{item}}"
      state: latest
    with_items:
      - openssl
    become: yes
    when: ansible_os_family == "Debian"

  - name: Secure Docker Registry with Nginx for Redhat
    yum:
      name: "{{item}}"
      state: latest
    with_items:
      - openssl
    become: yes
    when: ansible_os_family == "RedHat"

  - name: Install latest passlib with pip
    pip:
      name: passlib
      state: latest
      extra_args: "{{ pip_extra_args }}"
    become: yes

  - file: path=/etc/nginx/certs state=directory
    become: yes
    when: docker.registry.with_ssl|bool

  - name: stat docker-registry certificate file
    stat: path=/etc/nginx/certs/{{docker.registry.host}}.crt
    register: docker_registry_cert_stat
    become: yes
    when: docker.registry.with_ssl|bool

  - name: create server key and certificate
    include: certificate.yml
    when: docker.registry.with_ssl|bool and (not docker_registry_cert_stat.stat.exists)

  - htpasswd: path=/etc/nginx/conf.d/registry.htpasswd name={{item.name}} password={{item.password}} owner=root group=root mode=0644
    with_items: docker.registry.users
    become: yes
    register: docker_registry_auth

  - template: src=docker-registry-v2.j2 dest=/etc/nginx/conf.d/docker-registry.conf owner=root group=root mode=0644
    register: docker_registry_vhost
    become: yes

  - name: check if selinux is enabled
    command: getenforce
    register: selinux_status
    ignore_errors: yes
    changed_when: false
    become: yes

  - name: to fix SELinux issue
    shell: setsebool -P httpd_can_network_connect 1
    become: yes
    when: selinux_status.rc != 0

  - name: stop previous docker nginx
    command: "docker kill www-registry"
    ignore_errors: yes
    become: yes

  - name: remove previous docker nginx
    command: "docker rm www-registry"
    ignore_errors: yes
    become: yes

  - name: ensure Docker nginx is running
    command: "docker run -d -p {{docker.registry.ip}}:{{docker.registry.port}}:443 --name www-registry --net=bridge --privileged=true --restart=always --memory=\"512m\" --hostname={{ docker.registry.host }} --link=\"registry:registry\" -v /var/log/nginx/:/var/log/nginx:rw -v /etc/nginx/conf.d:/etc/nginx/conf.d:ro -v /etc/nginx/certs:/etc/nginx/certs:ro nginx:latest"
    register: start_nginx
    become: yes

